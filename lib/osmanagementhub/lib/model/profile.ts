/**
 * OS Management Hub API
 * Use the OS Management Hub API to manage and monitor updates and patches for the operating system environments in your private data centers through a single management console. For more information, see [Overview of OS Management Hub](https://docs.cloud.oracle.com/iaas/osmh/doc/overview.htm).

 * OpenAPI spec version: 20220901
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * Description of registration profile.
 */
export interface Profile {
  /**
   * The OCID of the profile that is immutable on creation.
   */
  "id": string;
  /**
   * The OCID of the tenancy containing the registration profile.
   */
  "compartmentId": string;
  /**
   * A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
   */
  "displayName": string;
  /**
   * The description of the registration profile.
   */
  "description"?: string;
  /**
   * The OCID of the management station.
   */
  "managementStationId"?: string;
  /**
   * The software source vendor name.
   */
  "vendorName": model.VendorName;
  /**
   * The operating system family.
   */
  "osFamily": model.OsFamily;
  /**
   * The architecture type.
   */
  "archType": model.ArchType;
  /**
   * The time the the registration profile was created. An RFC3339 formatted datetime string.
   */
  "timeCreated"?: Date;
  /**
   * The current state of the registration profile.
   */
  "lifecycleState"?: Profile.LifecycleState;
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Department\": \"Finance\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * System tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };

  "profileType": string;
}

export namespace Profile {
  export enum LifecycleState {
    Creating = "CREATING",
    Updating = "UPDATING",
    Active = "ACTIVE",
    Deleting = "DELETING",
    Deleted = "DELETED",
    Failed = "FAILED",
    /**
     * This value is used if a service returns a value for this enum that is not recognized by this
     * version of the SDK.
     */
    UnknownValue = "UNKNOWN_VALUE"
  }

  export function getJsonObj(obj: Profile): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "profileType" in obj && obj.profileType) {
      switch (obj.profileType) {
        case "LIFECYCLE":
          return model.LifecycleProfile.getJsonObj(<model.LifecycleProfile>(<object>jsonObj), true);
        case "SOFTWARESOURCE":
          return model.SoftwareSourceProfile.getJsonObj(
            <model.SoftwareSourceProfile>(<object>jsonObj),
            true
          );
        case "GROUP":
          return model.GroupProfile.getJsonObj(<model.GroupProfile>(<object>jsonObj), true);
        case "STATION":
          return model.StationProfile.getJsonObj(<model.StationProfile>(<object>jsonObj), true);
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.profileType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: Profile): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "profileType" in obj && obj.profileType) {
      switch (obj.profileType) {
        case "LIFECYCLE":
          return model.LifecycleProfile.getDeserializedJsonObj(
            <model.LifecycleProfile>(<object>jsonObj),
            true
          );
        case "SOFTWARESOURCE":
          return model.SoftwareSourceProfile.getDeserializedJsonObj(
            <model.SoftwareSourceProfile>(<object>jsonObj),
            true
          );
        case "GROUP":
          return model.GroupProfile.getDeserializedJsonObj(
            <model.GroupProfile>(<object>jsonObj),
            true
          );
        case "STATION":
          return model.StationProfile.getDeserializedJsonObj(
            <model.StationProfile>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger) common.LOG.logger.info(`Unknown value for: ${obj.profileType}`);
      }
    }
    return jsonObj;
  }
}
