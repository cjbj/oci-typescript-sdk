/**
 * OS Management Hub API
 * Use the OS Management Hub API to manage and monitor updates and patches for the operating system environments in your private data centers through a single management console. For more information, see [Overview of OS Management Hub](https://docs.cloud.oracle.com/iaas/osmh/doc/overview.htm).

 * OpenAPI spec version: 20220901
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * A software source contains a collection of packages.
 */
export interface SoftwareSourceSummary {
  /**
   * The OCID for the software source.
   */
  "id": string;
  /**
   * The OCID of the tenancy containing the software source.
   */
  "compartmentId": string;
  /**
   * User friendly name for the software source.
   */
  "displayName": string;
  /**
   * The Repo ID for the software source.
   */
  "repoId": string;
  /**
   * URL for the repository.
   */
  "url": string;
  /**
   * The date and time the software source was created, as described in
   * [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
   *
   */
  "timeCreated": Date;
  /**
   * The date and time of when the software source was updated as described in
   * [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
   *
   */
  "timeUpdated": Date;
  /**
   * Information specified by the user about the software source.
   */
  "description"?: string;
  /**
   * Possible availabilities of a software source.
   */
  "availability": model.Availability;
  /**
   * The OS family the software source belongs to.
   */
  "osFamily": model.OsFamily;
  /**
   * The architecture type supported by the software source.
   */
  "archType": model.ArchType;
  /**
   * Number of packages. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "packageCount"?: number;
  /**
   * The current state of the software source.
   */
  "lifecycleState"?: string;
  /**
   * Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Department\": \"Finance\"}}
   *
   */
  "freeformTags"?: { [key: string]: string };
  /**
   * Defined tags for this resource. Each key is predefined and scoped to a namespace.
   * For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
   * Example: {@code {\"Operations\": {\"CostCenter\": \"42\"}}}
   *
   */
  "definedTags"?: { [key: string]: { [key: string]: any } };
  /**
   * System tags for this resource. Each key is predefined and scoped to a namespace.
   * Example: {@code {\"orcl-cloud\": {\"free-tier-retained\": \"true\"}}}
   *
   */
  "systemTags"?: { [key: string]: { [key: string]: any } };

  "softwareSourceType": string;
}

export namespace SoftwareSourceSummary {
  export function getJsonObj(obj: SoftwareSourceSummary): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "softwareSourceType" in obj && obj.softwareSourceType) {
      switch (obj.softwareSourceType) {
        case "VENDOR":
          return model.VendorSoftwareSourceSummary.getJsonObj(
            <model.VendorSoftwareSourceSummary>(<object>jsonObj),
            true
          );
        case "VERSIONED":
          return model.VersionedCustomSoftwareSourceSummary.getJsonObj(
            <model.VersionedCustomSoftwareSourceSummary>(<object>jsonObj),
            true
          );
        case "CUSTOM":
          return model.CustomSoftwareSourceSummary.getJsonObj(
            <model.CustomSoftwareSourceSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.softwareSourceType}`);
      }
    }
    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: SoftwareSourceSummary): object {
    const jsonObj = { ...obj, ...{} };

    if (obj && "softwareSourceType" in obj && obj.softwareSourceType) {
      switch (obj.softwareSourceType) {
        case "VENDOR":
          return model.VendorSoftwareSourceSummary.getDeserializedJsonObj(
            <model.VendorSoftwareSourceSummary>(<object>jsonObj),
            true
          );
        case "VERSIONED":
          return model.VersionedCustomSoftwareSourceSummary.getDeserializedJsonObj(
            <model.VersionedCustomSoftwareSourceSummary>(<object>jsonObj),
            true
          );
        case "CUSTOM":
          return model.CustomSoftwareSourceSummary.getDeserializedJsonObj(
            <model.CustomSoftwareSourceSummary>(<object>jsonObj),
            true
          );
        default:
          if (common.LOG.logger)
            common.LOG.logger.info(`Unknown value for: ${obj.softwareSourceType}`);
      }
    }
    return jsonObj;
  }
}
