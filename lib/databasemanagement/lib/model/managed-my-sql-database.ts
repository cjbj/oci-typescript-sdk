/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The details of the Managed MySQL Database.
 */
export interface ManagedMySqlDatabase {
  /**
   * The OCID of the Managed MySQL Database.
   */
  "id": string;
  /**
   * The OCID of the compartment.
   */
  "compartmentId": string;
  /**
   * The name of the MySQL Database.
   */
  "dbName": string;
  /**
   * The version of the MySQL Database.
   */
  "dbVersion": string;
  /**
   * The date and time the Managed MySQL Database was created.
   */
  "timeCreated": Date;
  /**
   * The name of the Managed MySQL Database.
   */
  "name": string;
  /**
   * The name of the HeatWave cluster.
   */
  "heatWaveClusterDisplayName"?: string;
  /**
   * If HeatWave is enabled for this db system or not.
   */
  "isHeatWaveEnabled"?: boolean;
  /**
   * If HeatWave Lakehouse is enabled for the db system or not.
   */
  "isLakehouseEnabled"?: boolean;
  /**
   * Shape of the nodes in the HeatWave cluster.
   */
  "heatWaveNodeShape"?: string;
  /**
   * The total memory belonging to the HeatWave cluster in GBs. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "heatWaveMemorySize"?: number;
  /**
   * The information about an individual HeatWave nodes in the cluster.
   */
  "heatWaveNodes"?: Array<model.HeatWaveNode>;
  /**
   * If the HeatWave cluster is active or not.
   */
  "isHeatWaveActive"?: boolean;
  /**
   * The date and time the Managed MySQL Database was created.
   */
  "timeCreatedHeatWave"?: Date;
}

export namespace ManagedMySqlDatabase {
  export function getJsonObj(obj: ManagedMySqlDatabase): object {
    const jsonObj = {
      ...obj,
      ...{
        "heatWaveNodes": obj.heatWaveNodes
          ? obj.heatWaveNodes.map(item => {
              return model.HeatWaveNode.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: ManagedMySqlDatabase): object {
    const jsonObj = {
      ...obj,
      ...{
        "heatWaveNodes": obj.heatWaveNodes
          ? obj.heatWaveNodes.map(item => {
              return model.HeatWaveNode.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
