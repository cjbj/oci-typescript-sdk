/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 * 
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */

import * as model from "../model";
import common = require("oci-common");

/**
 * The list of aggregated metrics for a HeatWave cluster in the fleet.
 */
export interface HeatWaveClusterUsageMetrics {
  /**
   * The status of the HeatWave cluster. Indicates whether the status of the cluster is UP, DOWN, or UNKNOWN at the current time.
   */
  "status": model.HeatWaveClusterStatus;
  /**
   * The OCID for the DB system associated with the HeatWave cluster.
   */
  "dbSystemId": string;
  /**
   * The name of the DB system associated with the HeatWave cluster.
   */
  "dbSystemName": string;
  /**
   * The name of the HeatWave cluster.
   */
  "heatWaveClusterDisplayName": string;
  /**
   * Number of nodes in the HeatWave cluster. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "nodeCount": number;
  /**
   * If Lakehouse is enabled for the HeatWave cluster or not.
   */
  "isLakehouseEnabled": boolean;
  /**
   * Shape of the nodes in the HeatWave cluster.
   */
  "heatWaveNodeShape": string;
  /**
   * The total memory belonging to the HeatWave cluster in GBs. Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
   */
  "memorySize": number;
  /**
   * A list of the database health metrics like CPU and Memory.
   */
  "metrics": Array<model.HeatWaveFleetMetricDefinition>;
}

export namespace HeatWaveClusterUsageMetrics {
  export function getJsonObj(obj: HeatWaveClusterUsageMetrics): object {
    const jsonObj = {
      ...obj,
      ...{
        "metrics": obj.metrics
          ? obj.metrics.map(item => {
              return model.HeatWaveFleetMetricDefinition.getJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
  export function getDeserializedJsonObj(obj: HeatWaveClusterUsageMetrics): object {
    const jsonObj = {
      ...obj,
      ...{
        "metrics": obj.metrics
          ? obj.metrics.map(item => {
              return model.HeatWaveFleetMetricDefinition.getDeserializedJsonObj(item);
            })
          : undefined
      }
    };

    return jsonObj;
  }
}
